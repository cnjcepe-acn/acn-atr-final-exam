{
	"swagger": "2.0",
	"info": {
		"title": "Identity Management",
		"version": "1.0.0",
		"description": "FINAL Exam for ATR",
		"termsOfService": "http://swagger.io/terms/",
		"contact": {
			"name": "korzin"
		},
		"license": {
			"name": "Apache 2.0",
			"url": "http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host": "localhost:8686",
	"basePath": "/api",
	"tags": [
		{
			"name": "member",
			"description": "Member CRUD services. Member identidier generated by MongoDB for simplicity. Also some inheritence was provided to avoid passing custom id in POST"
		}
	],
	"schemes": [
		"http"
	],
	"paths": {
		"/members/login": {
			"get": {
				"summary": "Logs user into the system",
				"description": "",
				"operationId": "loginUser",
				"produces": [
					"application/xml",
					"application/json"
				],
				"parameters": [
					{
						"name": "username",
						"in": "query",
						"description": "The user name for login",
						"required": true,
						"type": "string"
					},
					{
						"name": "password",
						"in": "query",
						"description": "The password for login in clear text",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"type": "string"
						},
						"headers": {
							"X-Rate-Limit": {
								"type": "integer",
								"format": "int32",
								"description": "calls per hour allowed by the user"
							},
							"X-Expires-After": {
								"type": "string",
								"format": "date-time",
								"description": "date in UTC when token expires"
							}
						}
					},
					"400": {
						"description": "Invalid username/password supplied"
					}
				}
			}
		},
		"/members/{id}": {
			"get": {
				"tags": [
					"member"
				],
				"summary": "Get member by id",
				"operationId": "getMemberById",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"type": "string",
						"required": true,
						"description": "Id of member"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"$ref": "#/definitions/Member"
						}
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				},
				"produces": [
					"application/xml",
					"application/json"
				]
			},
			"put": {
				"tags": [
					"member"
				],
				"summary": "Update specific member",
				"operationId": "updateOneMember",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"type": "string",
						"required": true,
						"description": "Id of member"
					},
					{
						"name": "member",
						"in": "body",
						"schema": {
							"$ref": "#/definitions/MemberBody"
						},
						"description": "schema for updating member"
					}
				],
				"responses": {
					"201": {
						"description": "CREATED"
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				},
				"consumes": [
					"application/xml",
					"application/json"
				]
			},
			"delete": {
				"tags": [
					"member"
				],
				"summary": "Delete specific member",
				"operationId": "deleteOneMember",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"type": "string",
						"required": true,
						"description": "Id of member"
					}
				],
				"responses": {
					"200": {
						"description": "OK"
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				}
			}
		},
		"/members/{id}/img": {
			"put": {
				"tags": [
					"member"
				],
				"summary": "Update specific member with image",
				"operationId": "updateMemberImage",
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"type": "string",
						"required": true,
						"description": "Id of member"
					},
					{
						"in": "formData",
						"name": "memberimg",
						"type": "file",
						"required": true
					}
				],
				"responses": {
					"201": {
						"description": "UPDATED"
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				},
				"consumes": [
					"multipart/form-data"
				]
			}
		},
		"/members": {
			"get": {
				"tags": [
					"member"
				],
				"summary": "Getting list of all members",
				"operationId": "getMembers",
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "array",
							"items": {
								"$ref": "#/definitions/Member"
							}
						}
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				},
				"produces": [
					"application/xml",
					"application/json"
				]
			},
			"post": {
				"tags": [
					"member"
				],
				"summary": "Create member",
				"operationId": "createMember",
				"parameters": [
					{
						"in": "body",
						"name": "body",
						"schema": {
							"$ref": "#/definitions/MemberBody"
						},
						"required": true,
						"description": "body of member"
					}
				],
				"responses": {
					"200": {
						"description": "OK",
						"schema": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string",
									"description": "id of newly created member"
								}
							}
						}
					},
					"204": {
						"description": "NO_CONTENT"
					},
					"400": {
						"description": "BAD REQUEST"
					},
					"401": {
						"description": "UNATHORIZED"
					},
					"403": {
						"description": "FORBIDDEN"
					},
					"404": {
						"description": "NOT FOUND"
					},
					"500": {
						"description": "INTERNAL ERROR"
					},
					"504": {
						"description": "GATEWAY TIMEOUT"
					}
				},
				"consumes": [
					"multipart/form-data",
					"application/json",
					"application/xml"
				]
			}
		}
	},
	"definitions": {
		"MemberBody": {
			"description": "Provided inheritence for separation id and other entity properties",
			"type": "object",
			"required": [
				"firstName",
				"lastName"
			],
			"properties": {
				"firstName": {
					"type": "string"
				},
				"lastName": {
					"type": "string"
				},
				"birthDate": {
					"type": "string",
					"format": "date"
				},
				"postalCode": {
					"type": "string"
				},
				"avatar": {
					"type": "string",
					"format": "byte",
					"description": "avatar image"
				}
			}
		},
		"Member": {
			"allOf": [
				{
					"type": "object",
					"properties": {
						"id": {
							"type": "string",
							"description": "ObjectId generated by Mongo"
						}
					}
				},
				{
					"$ref": "#/definitions/MemberBody"
				}
			]
		}
	}
}
